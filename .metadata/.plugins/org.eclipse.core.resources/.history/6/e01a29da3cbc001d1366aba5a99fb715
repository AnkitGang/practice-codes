package Stack;

public class StackUsingArray {
	private int data[];        //private becoz we dont want user to make any changes to array and top
	private int top;
	
	public int[] getData() {
		return data;
	}

	public void setData(int[] data) {
		this.data = data;
	}

	public int getTop() {
		return top;
	}

	public void setTop(int top) {
		this.top = top;
	}

	public StackUsingArray() {
		data = new int[10];
		top = -1;
	}
	
	public StackUsingArray(int capacity) {
		data = new int[capacity];
		top = -1;
	}
	
	public boolean isEmpty() {
//		if(top == -1)
//			return true;
//		else
//			return false;
		return (top == -1);
	}
	
	public int size() {
		return top + 1;
	}
	
	public int top() throws StackEmptyException{
		if(size() == 0) {
			StackEmptyException e = new StackEmptyException();
			throw e;
		}
		
		return data[top];
	}
	
	public void push(int elem) throws StackFullException{
		if(size() == data.length) {          //when size of stack is equal to the length of array then stack is full
//			StackFullException e = new StackFullException();
//			throw e;
			
			doubleCapacity();
		}
		
		top++;
		data[top] = elem;
	}
	
	private void doubleCapacity() {
		// TODO Auto-generated method stub
		int[] temp = data;
		data = new int[2 * temp.length];
		for(int i=0; i<top; i++)
			data[i] = temp[i];
	}

	public int pop() throws StackEmptyException{
		if(size() == 0) {
			StackEmptyException e = new StackEmptyException();
			throw e;
		}
		
		int temp = data[top];
		top--;
		return temp;
	}
}
